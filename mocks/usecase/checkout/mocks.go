// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/checkout/checkout.go

// Package mock_checkout is a generated GoMock package.
package mock_checkout

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/yoserizalfirdaus/tes_kuncie/entity"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// GetBySku mocks base method.
func (m *MockProductRepository) GetBySku(sku string) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySku", sku)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySku indicates an expected call of GetBySku.
func (mr *MockProductRepositoryMockRecorder) GetBySku(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySku", reflect.TypeOf((*MockProductRepository)(nil).GetBySku), sku)
}

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// ClearCart mocks base method.
func (m *MockCartRepository) ClearCart(trxID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCart", trxID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCart indicates an expected call of ClearCart.
func (mr *MockCartRepositoryMockRecorder) ClearCart(trxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCart", reflect.TypeOf((*MockCartRepository)(nil).ClearCart), trxID)
}

// GetByTransactionID mocks base method.
func (m *MockCartRepository) GetByTransactionID(trxID string) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionID", trxID)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionID indicates an expected call of GetByTransactionID.
func (mr *MockCartRepositoryMockRecorder) GetByTransactionID(trxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionID", reflect.TypeOf((*MockCartRepository)(nil).GetByTransactionID), trxID)
}

// SaveCart mocks base method.
func (m *MockCartRepository) SaveCart(cart *entity.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCart", cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCart indicates an expected call of SaveCart.
func (mr *MockCartRepositoryMockRecorder) SaveCart(cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCart", reflect.TypeOf((*MockCartRepository)(nil).SaveCart), cart)
}

// MockPromoRepository is a mock of PromoRepository interface.
type MockPromoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPromoRepositoryMockRecorder
}

// MockPromoRepositoryMockRecorder is the mock recorder for MockPromoRepository.
type MockPromoRepositoryMockRecorder struct {
	mock *MockPromoRepository
}

// NewMockPromoRepository creates a new mock instance.
func NewMockPromoRepository(ctrl *gomock.Controller) *MockPromoRepository {
	mock := &MockPromoRepository{ctrl: ctrl}
	mock.recorder = &MockPromoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromoRepository) EXPECT() *MockPromoRepositoryMockRecorder {
	return m.recorder
}

// GetPromoByProductSku mocks base method.
func (m *MockPromoRepository) GetPromoByProductSku(productSku string) (entity.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromoByProductSku", productSku)
	ret0, _ := ret[0].(entity.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoByProductSku indicates an expected call of GetPromoByProductSku.
func (mr *MockPromoRepositoryMockRecorder) GetPromoByProductSku(productSku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoByProductSku", reflect.TypeOf((*MockPromoRepository)(nil).GetPromoByProductSku), productSku)
}
